
// https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.htm

//stap -v mqNotify.stp

probe syscall.mq_notify
{
    if(execname() == "exploit")
    {
        printf("\n\n(%d-%d) [SYSCALL]>>> mq_notify (%s)\n", pid(), tid(), argstr)
    }
}
probe kernel.function("copy_from_user")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [uland] ==>> copy_from_user (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("skb_put")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [skb] ==>> skb_put (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("netlink_getsockbyfilp")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [netlink] ==>> netlink_getsockbyfilp (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("netlink_attachskb")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [netlink]] ==>> netlink_attachskb (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("netlink_detachskb")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [netlink] ==>> netlink_detachskb (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("alloc_skb")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [skb] ==>> alloc_skb (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("fget")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [vfs] ==>> fget (%s)\n",pid(),tid(), $$parms)
    }
}
probe kernel.function("fdget")
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [vfs] ==>> fdget (%s)\n",pid(),tid(), $$parms)
    }
}


probe kernel.function("fget").return
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [vfs] <<== fget (%x)\n",pid(),tid(), $return)
    }
}
probe kernel.function("skb_put").return
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [skb] <<== skb_put (%x)\n",pid(),tid(), $return)
    }
}
probe kernel.function("netlink_attachskb").return
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [netlink] <<== netlink_attachskb (%x)\n",pid(),tid(), $return)
    }
}
probe kernel.function("netlink_getsockbyfilp").return
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [netlink] <<== netlink_getsockbyfilp (%x)\n",pid(),tid(), $return)
    }
}

probe syscall.mq_notify.return
{
    if(execname() == "exploit")
    {
        printf("(%d-%d) [SYSCALL] <<< mq_notify (%x)\n\n\n", pid(), tid(), $return)
    }
}